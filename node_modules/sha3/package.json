{
  "_args": [
    [
      "sha3@^1.2.2",
      "/home/subhash/Desktop/Ethereum/ethereum_project/node_modules/keccakjs"
    ]
  ],
  "_from": "sha3@>=1.2.2 <2.0.0",
  "_hasShrinkwrap": false,
  "_id": "sha3@1.2.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/sha3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sha3_1.2.6_1575527211974_0.7030547200671107"
  },
  "_npmUser": {
    "email": "devin@canterberry.cc",
    "name": "canterberry"
  },
  "_phantomChildren": {},
  "_requested": {
    "name": "sha3",
    "raw": "sha3@^1.2.2",
    "rawSpec": "^1.2.2",
    "scope": null,
    "spec": ">=1.2.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/keccakjs"
  ],
  "_resolved": "https://registry.npmjs.org/sha3/-/sha3-1.2.6.tgz",
  "_shasum": "102aa3e47dc793e2357902c3cce8760822f9e905",
  "_shrinkwrap": null,
  "_spec": "sha3@^1.2.2",
  "_where": "/home/subhash/Desktop/Ethereum/ethereum_project/node_modules/keccakjs",
  "author": {
    "email": "hongli@phusion.nl",
    "name": "Hongli Lai",
    "url": "Phusion"
  },
  "bugs": {
    "url": "https://github.com/phusion/node-sha3/issues"
  },
  "dependencies": {
    "nan": "2.13.2"
  },
  "description": "A Node.js C++ extension for SHA-3 (Keccak)",
  "devDependencies": {
    "mocha": "6.1.4"
  },
  "directories": {},
  "dist": {
    "fileCount": 29,
    "integrity": "sha512-KgLGmJGrmNB4JWVsAV11Yk6KbvsAiygWJc7t5IebWva/0NukNrjJqhtKhzy3Eiv2AKuGvhZZt7dt1mDo7HkoiQ==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd6KMsCRA9TVsSAnZWagAAmH8P/iei4I9DHMtP0JnR7FUt\n7h8YesjdOMoFDMrVu/AH75sUzqs4DH4C5NlzNa2xIS3PazdW88lQNUaZSOXI\nfKjdx4JzdkEqHA6nQbc970H15AWmyGZCXex3/4dIjILOs91jvnxZvPPj6og6\nh0TkwkKSm3nwuhM/GG4nvmwpEqZBm11ZSeV3sJwqsTmi/pV1Tp0C29UQEhS3\n12kq012ujW7U4S3FlFfZ1o/2p9h8aAfg/74bUS90wEulraSnbFap3/uuyXRG\neukzBSQamBJwJA4nt+Ahc5yMPd57DvDdiXdUi89q0LahKglKERnFiL/BUHbc\n0iWycmw9ugDLU+cE5HUcN+4O5oZenA0pRZZHJZeZx+qjXqOo1WxmVtSg8GXk\nMbdSNS8qH5dMRJmcUxUcu5dX2PQoBWz693KMWjbUYEjDIq/b2hA0x0vAE8nO\n2ZvpUxmEN+Yuv9ryp4r8cP+6J/T/vJwUA7fw/CdzALGpNkxWtLvG2GhhLwaI\nVLfq169+Zv8voY+EHeIwAbpG9jzz+dMqMsJ9M1bVsCkNesd8PLl5Fb3Uo1BL\nK+6KmcMcd0tKsLAWdMME8wztu7eb0TkDqxH5uw92RW4IeZsJ6tL3LCh33In9\ntDhEXJkZrTCQW7anZiDPGxbJTpMJd9gNAInhay0aEOfJJNKg8aMvvImFrzsJ\noMcw\r\n=UN21\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "102aa3e47dc793e2357902c3cce8760822f9e905",
    "tarball": "https://registry.npmjs.org/sha3/-/sha3-1.2.6.tgz",
    "unpackedSize": 5474831
  },
  "gypfile": true,
  "homepage": "https://github.com/phusion/node-sha3#readme",
  "keywords": [
    "hash",
    "hashing",
    "sha",
    "sha-3",
    "sha3"
  ],
  "license": "MIT",
  "licenseText": "Copyright 2012 Phusion\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "main": "build/Release/sha3",
  "maintainers": [
    {
      "name": "canterberry",
      "email": "devin@canterberry.cc"
    }
  ],
  "name": "sha3",
  "optionalDependencies": {},
  "readme": "# A Node.js C++ extension for SHA-3 (Keccak)\n\n[![Travis CI][3]][4]\n[![npm version][5]][6]\n[![npm downloads][7]][6]\n[![dependencies][8]][9]\n[![devDependencies][10]][9]\n[![license][11]][12]\n\nThis Node.js extension implements the SHA-3 ([Keccak][1]) cryptographic hashing algorithm. It is based on the reference C implementation, version 3.2. The exposed interface is almost identical to that of the `crypto` standard library.\n\n[![Phusion][13]][2]\n\n## Installation\n\nVia `npm`:\n\n```bash\n$ npm install sha3\n```\n\nVia `yarn`:\n\n```bash\n$ yarn add sha3\n```\n\n## Usage\n\nKeccak supports 5 hash lengths: 224-bit, 256-bit, 384-bit, 512-bit and variable length. Variable length is not supported by this Node.js extension. Unless the user specifies otherwise, this Node.js extension assumes 512-bit.\n\n```javascript\nconst SHA3 = require('sha3');\n\n// Generate 512-bit digest.\nlet d = new SHA3.SHA3Hash();\nd.update('foo');\nd.digest('hex');\n// => \"1597842a...\"\n\n// Generate 224-bit digest.\nd = new SHA3.SHA3Hash(224);\nd.update('foo');\nd.digest('hex');\n// => \"daa94da7...\"\n```\n\n### new SHA3Hash([hashlen])\n\nThis is the hash object. `hashlen` is 512 by default.\n\n### hash.update(data, [input_encoding])\n\nUpdates the hash content with the given data, the encoding of which is given in `input_encoding` and can be `'utf8'`, `'ascii'` or `'binary'`. Defaults to `'binary'`. This can be called many times with new data as it is streamed.\n\n### hash.digest([encoding])\n\nCalculates the digest of all of the passed data to be hashed. The encoding can be `'hex'` or `'binary'`. Defaults to `'binary'`.\n\nNote: unlike `crypto.Hash`, a `SHA3Hash` object _can_ still be used after the `digest()` method been called.\n\n## Running the test suite\n\nRun the test suite as follows:\n\n```bash\n$ npm test\n```\n\nThe test suite is automatically generated from Keccak's reference test suite.\nIt requires that you have Python 2.7 installed and available via the\n`python` executable.\n\n## Warning\n\nDo not use SHA-3 for hashing passwords. Do not even use SHA-3 + salt for hashing passwords. Use a [slow hash][14] instead.\n\n## See also\n\n[Digest::SHA3 for Ruby](https://github.com/phusion/digest-sha3-ruby)\n\n[1]: https://keccak.team/keccak.html\n[2]: https://www.phusion.nl/\n[3]: https://img.shields.io/travis/phusion/node-sha3/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/phusion/node-sha3\n[5]: https://img.shields.io/npm/v/sha3.svg\n[6]: https://www.npmjs.com/package/sha3\n[7]: https://img.shields.io/npm/dt/sha3.svg\n[8]: https://img.shields.io/david/phusion/node-sha3.svg\n[9]: https://github.com/phusion/node-sha3/blob/master/package.json\n[10]: https://img.shields.io/david/dev/phusion/node-sha3.svg\n[11]: https://img.shields.io/github/license/phusion/node-sha3.svg\n[12]: https://github.com/phusion/node-sha3/blob/master/LICENSE\n[13]: https://www.phusion.nl/images/header/pinwheel_logo.svg\n[14]: http://codahale.com/how-to-safely-store-a-password/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/phusion/node-sha3.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "python test/generate_tests.py > test/test_vectors.js && node test/test_vectors.js && mocha test/unit_tests.js"
  },
  "version": "1.2.6"
}
